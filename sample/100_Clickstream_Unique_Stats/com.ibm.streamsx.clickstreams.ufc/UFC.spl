namespace com.ibm.streamsx.clickstreams.ufc;

use com.ibm.streamsx.clickstream.dsx::*;
use com.ibm.streamsx.json::*;

type product_T = rstring product_name, rstring product_category, float64 product_price;

type DSXClkStrmAggregates_T = 

	rstring firstTimestamp, // 2017-12-11T11:42:23
	rstring lstTimestamp, // 2017-12-11T11:42:23
	int32 count_customer_id,
	list<rstring> click_event_type,
	int32 count_click_event_type,
	list<product_T> list_products,
	list<rstring> product_category,
	int32 count_product_category,
	list<rstring> product_name,
	int32 count_product;


type DSXClkStrmFunct_T = 
	rstring click_event_type,
	rstring time_stamp, // 2017-12-11T11:42:23
	int64   customer_id, 
	rstring product_name,
	rstring product_category,
	product_T product;
	

type DSXClkStrmDelay_T = tuple<float64 delay>, DSXClkStrm_T;


composite UFC
{
	param 
		expression<rstring> $inputFile : getSubmissionTimeValue("inputFile", "/dsxClkStrm_2017.12.12_19.29.53_.csv.gz");
	graph
		stream<DSXClkStrmDelay_T> ClkStrm= FileSource()
		{
			param
				file : $inputFile;
				compression : gzip;
		}

		stream<DSXClkStrmFunct_T> ClkStrmStat = Functor(ClkStrm as c)
		{
			output
				ClkStrmStat : product = {product_name=c.product_name, product_category=c.product_category, product_price = c.product_price} ;
		}
 
		stream<DSXClkStrmAggregates_T> ClkStrmAggregates = Aggregate(ClkStrmStat as t)
		{
			window
				t : tumbling, punct() ;
				output ClkStrmAggregates : 
					firstTimestamp = First(t.time_stamp), 
		            lstTimestamp = Last(t.time_stamp), 
		            count_customer_id = CountDistinct(t.customer_id),
		            click_event_type = CollectDistinct(t.click_event_type),
		            count_click_event_type = CountDistinct(t.click_event_type),
		            list_products = CollectDistinct(t.product),
		            product_category = CollectDistinct(t.product_category),
		            count_product_category = CountDistinct(t.product.product_category),
		            product_name = CollectDistinct(t.product_name),
		            count_product = CountDistinct(t.product_name);
				
		}
		   
		     	                                                     
       	() as PrintLn = Custom(ClkStrmAggregates) {    
       		logic 
       		onTuple ClkStrmAggregates : {
       			printStringLn( com.ibm.streamsx.json::tupleToJSON(ClkStrmAggregates) );
       		}          
       	}                                                    
  	/*                                                               
	() as Print = FileSink(ClkStrmAggregates) {
		param
			file : "/dev/stdout";
	}
	* 
	*/
}


